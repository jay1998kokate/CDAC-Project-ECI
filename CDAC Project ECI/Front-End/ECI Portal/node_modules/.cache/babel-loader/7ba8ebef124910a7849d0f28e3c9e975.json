{"ast":null,"code":"var _jsxFileName = \"E:\\\\CDAC Project ECI\\\\Front-End\\\\ECI Portal\\\\src\\\\Pages\\\\PoliticalPartyPages\\\\RegisterPoliticalParty.js\",\n    _s = $RefreshSig$();\n\nimport * as yup from \"yup\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { setLocale } from \"yup\";\nimport InputComponent from \"../../Components/UIComponents/InputComponent\";\nimport { partyRegistration } from \"./../../Common/Constant\";\nimport axios from \"axios\";\nimport { url } from \"../../Common/Constant\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport RegistrationComponent from \"../../Components/UIComponents/RegistrationComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RegisterPoliticalParty() {\n  _s();\n\n  //   setLocale({\n  //     mixed: {\n  //       notType: \"Please upload party symbol image\",\n  //     },\n  //   });\n  const history = useHistory();\n  const [failed, setFailed] = useState(null);\n  const schema = yup.object().shape({\n    politicalPartyName: yup.string().required(\"Please enter Party Name\"),\n    presidentName: yup.string().required(\"Please enter president name\"),\n    state: yup.string().required(\"Please enter state\"),\n    district: yup.string().required(\"Please enter district\"),\n    politicalPartyAddress: yup.string().required(\"Please enter party address\")\n  });\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(schema)\n  });\n\n  const registerParty = formData => {\n    const data = {\n      politicalPartyName: formData.politicalPartyName,\n      presidentName: formData.presidentName,\n      state: formData.state,\n      district: formData.district,\n      partySymbol: formData.partySymbol[0].name,\n      politicalPartyAddress: formData.politicalPartyAddress\n    };\n    console.log(data);\n    axios.post(url + \"/politicalParty/\", data).then(response => {\n      const result = response.data;\n\n      if (result.status == \"success\") {\n        document.getElementById(\"party-registration\").reset();\n        setFailed(false);\n      } else setFailed(true);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(RegistrationComponent, {\n      errors: errors,\n      failed: failed,\n      handleSubmit: handleSubmit,\n      heading: \"Party Registration\",\n      inputFields: partyRegistration,\n      registerFunction: registerParty,\n      register: register,\n      formId: \"party-registration\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RegisterPoliticalParty, \"ZB3A4eq05oGstKbG4TuN6pJSoKA=\", false, function () {\n  return [useHistory, useForm];\n});\n\n_c = RegisterPoliticalParty;\nexport default RegisterPoliticalParty;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterPoliticalParty\");","map":{"version":3,"sources":["E:/CDAC Project ECI/Front-End/ECI Portal/src/Pages/PoliticalPartyPages/RegisterPoliticalParty.js"],"names":["yup","useForm","yupResolver","setLocale","InputComponent","partyRegistration","axios","url","useHistory","useState","RegistrationComponent","RegisterPoliticalParty","history","failed","setFailed","schema","object","shape","politicalPartyName","string","required","presidentName","state","district","politicalPartyAddress","register","handleSubmit","formState","errors","resolver","registerParty","formData","data","partySymbol","name","console","log","post","then","response","result","status","document","getElementById","reset"],"mappings":"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","sourcesContent":["import * as yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { setLocale } from \"yup\";\r\nimport InputComponent from \"../../Components/UIComponents/InputComponent\";\r\nimport { partyRegistration } from \"./../../Common/Constant\";\r\nimport axios from \"axios\";\r\nimport { url } from \"../../Common/Constant\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport RegistrationComponent from \"../../Components/UIComponents/RegistrationComponent\";\r\nfunction RegisterPoliticalParty() {\r\n  //   setLocale({\r\n  //     mixed: {\r\n  //       notType: \"Please upload party symbol image\",\r\n  //     },\r\n  //   });\r\n\r\n  const history = useHistory();\r\n\r\n  const [failed, setFailed] = useState(null);\r\n\r\n  const schema = yup.object().shape({\r\n    politicalPartyName: yup.string().required(\"Please enter Party Name\"),\r\n    presidentName: yup.string().required(\"Please enter president name\"),\r\n    state: yup.string().required(\"Please enter state\"),\r\n    district: yup.string().required(\"Please enter district\"),\r\n    politicalPartyAddress: yup.string().required(\"Please enter party address\"),\r\n  });\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  const registerParty = (formData) => {\r\n    const data = {\r\n      politicalPartyName: formData.politicalPartyName,\r\n      presidentName: formData.presidentName,\r\n      state: formData.state,\r\n      district: formData.district,\r\n      partySymbol: formData.partySymbol[0].name,\r\n      politicalPartyAddress: formData.politicalPartyAddress,\r\n    };\r\n    console.log(data);\r\n    axios.post(url + \"/politicalParty/\", data).then((response) => {\r\n      const result = response.data;\r\n      if (result.status == \"success\") {\r\n        document.getElementById(\"party-registration\").reset();\r\n        setFailed(false);\r\n      } else setFailed(true);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <RegistrationComponent\r\n        errors={errors}\r\n        failed={failed}\r\n        handleSubmit={handleSubmit}\r\n        heading={\"Party Registration\"}\r\n        inputFields={partyRegistration}\r\n        registerFunction={registerParty}\r\n        register={register}\r\n        formId={\"party-registration\"}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RegisterPoliticalParty;\r\n"]},"metadata":{},"sourceType":"module"}