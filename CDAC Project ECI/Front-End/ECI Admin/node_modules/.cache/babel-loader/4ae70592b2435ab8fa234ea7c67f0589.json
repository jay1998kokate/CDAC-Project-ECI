{"ast":null,"code":"var _jsxFileName = \"D:\\\\ECI Project\\\\ECI Admin\\\\src\\\\Pages\\\\AssemblyPages\\\\AddAssemblyPage.js\",\n    _s = $RefreshSig$();\n\nimport * as yup from \"yup\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport RegistrationComponent from \"../../Components/RegistrationComponent\";\nimport { AssemblyRegistrationInputs } from \"../../Common/Constant\";\nimport { url } from \"../../src/Common/Constant\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AddAssemblyPage() {\n  _s();\n\n  const history = useHistory();\n  const [failed, setFailed] = useState(null);\n  const schema = yup.object().shape({\n    assemblyName: yup.string().required(\"Please Enter Assembly Name\"),\n    state: yup.string().required(\"Enter State Name\"),\n    notation: yup.string().required(\"Enter Notation\"),\n    district: yup.string().required(\"Enter District Name\"),\n    parliamentId: yup.string().required(\"Enter Parliament Id\")\n  });\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(schema)\n  });\n\n  const registerFunction = formData => {\n    console.log(formData);\n    const data = {\n      assemblyName: formData.assemblyName,\n      state: formData.state,\n      notation: formData.notation,\n      district: formData.district,\n      parliamentId: Number.parseInt(formData.parliamentId)\n    };\n    axios.post(url + \"assemblyInfo/add\", data).then(response => {\n      const result = response.data;\n\n      if (result.status == \"success\") {\n        document.getElementById(\"Assembly-Registration\").reset();\n        setFailed(false);\n      } else setFailed(true);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(RegistrationComponent, {\n      errors: errors,\n      failed: failed,\n      handleSubmit: handleSubmit,\n      heading: \"Add Assembly\",\n      inputFields: AssemblyRegistrationInputs,\n      registerFunction: registerFunction,\n      register: register,\n      formId: \"Assembly-Registration\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddAssemblyPage, \"ZB3A4eq05oGstKbG4TuN6pJSoKA=\", false, function () {\n  return [useHistory, useForm];\n});\n\n_c = AddAssemblyPage;\nexport default AddAssemblyPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddAssemblyPage\");","map":{"version":3,"sources":["D:/ECI Project/ECI Admin/src/Pages/AssemblyPages/AddAssemblyPage.js"],"names":["yup","useForm","yupResolver","useHistory","useState","axios","RegistrationComponent","AssemblyRegistrationInputs","url","AddAssemblyPage","history","failed","setFailed","schema","object","shape","assemblyName","string","required","state","notation","district","parliamentId","register","handleSubmit","formState","errors","resolver","registerFunction","formData","console","log","data","Number","parseInt","post","then","response","result","status","document","getElementById","reset"],"mappings":";;;AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AAEA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,MAAkC,wCAAlC;AACA,SAASC,0BAAT,QAA2C,uBAA3C;AACA,SAASC,GAAT,QAAoB,2BAApB;;;AAEA,SAASC,eAAT,GAA2B;AAAA;;AACzB,QAAMC,OAAO,GAAGP,UAAU,EAA1B;AAEA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,IAAD,CAApC;AAEA,QAAMS,MAAM,GAAGb,GAAG,CAACc,MAAJ,GAAaC,KAAb,CAAmB;AAChCC,IAAAA,YAAY,EAAEhB,GAAG,CAACiB,MAAJ,GAAaC,QAAb,CAAsB,4BAAtB,CADkB;AAEhCC,IAAAA,KAAK,EAAEnB,GAAG,CAACiB,MAAJ,GAAaC,QAAb,CAAsB,kBAAtB,CAFyB;AAGhCE,IAAAA,QAAQ,EAAEpB,GAAG,CAACiB,MAAJ,GAAaC,QAAb,CAAsB,gBAAtB,CAHsB;AAIhCG,IAAAA,QAAQ,EAAErB,GAAG,CAACiB,MAAJ,GAAaC,QAAb,CAAsB,qBAAtB,CAJsB;AAKhCI,IAAAA,YAAY,EAAEtB,GAAG,CAACiB,MAAJ,GAAaC,QAAb,CAAsB,qBAAtB;AALkB,GAAnB,CAAf;AAQA,QAAM;AACJK,IAAAA,QADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAHP,MAIFzB,OAAO,CAAC;AACV0B,IAAAA,QAAQ,EAAEzB,WAAW,CAACW,MAAD;AADX,GAAD,CAJX;;AAQA,QAAMe,gBAAgB,GAAIC,QAAD,IAAc;AACrCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,UAAMG,IAAI,GAAG;AACXhB,MAAAA,YAAY,EAAEa,QAAQ,CAACb,YADZ;AAEXG,MAAAA,KAAK,EAAEU,QAAQ,CAACV,KAFL;AAGXC,MAAAA,QAAQ,EAAES,QAAQ,CAACT,QAHR;AAIXC,MAAAA,QAAQ,EAAEQ,QAAQ,CAACR,QAJR;AAKXC,MAAAA,YAAY,EAAEW,MAAM,CAACC,QAAP,CAAgBL,QAAQ,CAACP,YAAzB;AALH,KAAb;AAQAjB,IAAAA,KAAK,CAAC8B,IAAN,CAAW3B,GAAG,GAAG,kBAAjB,EAAqCwB,IAArC,EAA2CI,IAA3C,CAAiDC,QAAD,IAAc;AAC5D,YAAMC,MAAM,GAAGD,QAAQ,CAACL,IAAxB;;AACA,UAAGM,MAAM,CAACC,MAAP,IAAiB,SAApB,EAA+B;AAC3BC,QAAAA,QAAQ,CAACC,cAAT,CAAwB,uBAAxB,EAAiDC,KAAjD;AACA9B,QAAAA,SAAS,CAAC,KAAD,CAAT;AACH,OAHD,MAGMA,SAAS,CAAC,IAAD,CAAT;AACP,KAND;AAOD,GAjBD;;AAmBA,sBACE;AAAA,2BACE,QAAC,qBAAD;AACE,MAAA,MAAM,EAAEc,MADV;AAEE,MAAA,MAAM,EAAEf,MAFV;AAGE,MAAA,YAAY,EAAEa,YAHhB;AAIE,MAAA,OAAO,EAAE,cAJX;AAKE,MAAA,WAAW,EAAEjB,0BALf;AAME,MAAA,gBAAgB,EAAEqB,gBANpB;AAOE,MAAA,QAAQ,EAAEL,QAPZ;AAQE,MAAA,MAAM,EAAE;AARV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GAtDQd,e;UACSN,U,EAgBZF,O;;;KAjBGQ,e;AAwDT,eAAeA,eAAf","sourcesContent":["import * as yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport RegistrationComponent from \"../../Components/RegistrationComponent\";\r\nimport { AssemblyRegistrationInputs } from \"../../Common/Constant\";\r\nimport { url } from \"../../src/Common/Constant\";\r\n\r\nfunction AddAssemblyPage() {\r\n  const history = useHistory();\r\n\r\n  const [failed, setFailed] = useState(null);\r\n\r\n  const schema = yup.object().shape({\r\n    assemblyName: yup.string().required(\"Please Enter Assembly Name\"),\r\n    state: yup.string().required(\"Enter State Name\"),\r\n    notation: yup.string().required(\"Enter Notation\"),\r\n    district: yup.string().required(\"Enter District Name\"),\r\n    parliamentId: yup.string().required(\"Enter Parliament Id\"),\r\n  });\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  const registerFunction = (formData) => {\r\n    console.log(formData);\r\n    const data = {\r\n      assemblyName: formData.assemblyName,\r\n      state: formData.state,\r\n      notation: formData.notation,\r\n      district: formData.district,\r\n      parliamentId: Number.parseInt(formData.parliamentId),\r\n    };\r\n\r\n    axios.post(url + \"assemblyInfo/add\", data).then((response) => {\r\n      const result = response.data;\r\n      if(result.status == \"success\") {\r\n          document.getElementById(\"Assembly-Registration\").reset();\r\n          setFailed(false);\r\n      }else setFailed(true)\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <RegistrationComponent\r\n        errors={errors}\r\n        failed={failed}\r\n        handleSubmit={handleSubmit}\r\n        heading={\"Add Assembly\"}\r\n        inputFields={AssemblyRegistrationInputs}\r\n        registerFunction={registerFunction}\r\n        register={register}\r\n        formId={\"Assembly-Registration\"}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddAssemblyPage;\r\n"]},"metadata":{},"sourceType":"module"}