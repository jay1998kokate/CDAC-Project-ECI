{"ast":null,"code":"var _jsxFileName = \"D:\\\\ECI Project\\\\ECI Admin\\\\src\\\\Pages\\\\ElectionResultPages\\\\AddAssemblyResult.js\",\n    _s = $RefreshSig$();\n\nimport * as yup from \"yup\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport RegistrationComponent from \"../../Components/RegistrationComponent\";\nimport { AssemblyResultInputs, url } from \"../../Common/Constant\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AddAssemblyResult() {\n  _s();\n\n  const history = useHistory();\n  const [failed, setFailed] = useState(null);\n  const schema = yup.object().shape({\n    assemblyId: yup.string().required(\"Please Enter Assembly Id\"),\n    winningCandidateId: yup.string().required(\"Please Enter  Winning Candidate Id\"),\n    electionId: yup.string().required(\"Please Enter Election Id\")\n  });\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(schema)\n  });\n\n  const addResult = formData => {\n    const data = {\n      assemblyId: Number.parseInt(formData.assemblyId),\n      winningCandidateId: Number.parseInt(formData.winningCandidateId),\n      electionId: Number.parseInt(formData.electionId)\n    };\n    axios.post(url + \"assemblyResult\", data).then(response => {\n      const result = response.data;\n\n      if (result.status == \"success\") {\n        document.getElementById(\"Assembly-Result\").reset();\n        setFailed(false);\n      } else setFailed(true);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(RegistrationComponent, {\n      errors: errors,\n      failed: failed,\n      handleSubmit: handleSubmit,\n      heading: \"Add Assembly Result\",\n      inputFields: AssemblyResultInputs,\n      registerFunction: addResult,\n      register: register,\n      formId: \"Assembly-Result\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddAssemblyResult, \"ZB3A4eq05oGstKbG4TuN6pJSoKA=\", false, function () {\n  return [useHistory, useForm];\n});\n\n_c = AddAssemblyResult;\nexport default AddAssemblyResult;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddAssemblyResult\");","map":{"version":3,"sources":["D:/ECI Project/ECI Admin/src/Pages/ElectionResultPages/AddAssemblyResult.js"],"names":["yup","useForm","yupResolver","axios","useHistory","useState","RegistrationComponent","AssemblyResultInputs","url","AddAssemblyResult","history","failed","setFailed","schema","object","shape","assemblyId","string","required","winningCandidateId","electionId","register","handleSubmit","formState","errors","resolver","addResult","formData","data","Number","parseInt","post","then","response","result","status","document","getElementById","reset"],"mappings":";;;AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,qBAAP,MAAkC,wCAAlC;AACA,SAASC,oBAAT,EAA+BC,GAA/B,QAA0C,uBAA1C;;;AAEA,SAASC,iBAAT,GAA6B;AAAA;;AAC3B,QAAMC,OAAO,GAAGN,UAAU,EAA1B;AAEA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,IAAD,CAApC;AAEA,QAAMQ,MAAM,GAAGb,GAAG,CAACc,MAAJ,GAAaC,KAAb,CAAmB;AAChCC,IAAAA,UAAU,EAAEhB,GAAG,CAACiB,MAAJ,GAAaC,QAAb,CAAsB,0BAAtB,CADoB;AAEhCC,IAAAA,kBAAkB,EAAEnB,GAAG,CACpBiB,MADiB,GAEjBC,QAFiB,CAER,oCAFQ,CAFY;AAKhCE,IAAAA,UAAU,EAAEpB,GAAG,CAACiB,MAAJ,GAAaC,QAAb,CAAsB,0BAAtB;AALoB,GAAnB,CAAf;AAQA,QAAM;AACJG,IAAAA,QADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAHP,MAIFvB,OAAO,CAAC;AACVwB,IAAAA,QAAQ,EAAEvB,WAAW,CAACW,MAAD;AADX,GAAD,CAJX;;AAQA,QAAMa,SAAS,GAAIC,QAAD,IAAc;AAC9B,UAAMC,IAAI,GAAG;AACXZ,MAAAA,UAAU,EAAEa,MAAM,CAACC,QAAP,CAAgBH,QAAQ,CAACX,UAAzB,CADD;AAEXG,MAAAA,kBAAkB,EAAEU,MAAM,CAACC,QAAP,CAAgBH,QAAQ,CAACR,kBAAzB,CAFT;AAGXC,MAAAA,UAAU,EAAES,MAAM,CAACC,QAAP,CAAgBH,QAAQ,CAACP,UAAzB;AAHD,KAAb;AAMAjB,IAAAA,KAAK,CAAC4B,IAAN,CAAWvB,GAAG,GAAG,gBAAjB,EAAmCoB,IAAnC,EAAyCI,IAAzC,CAA+CC,QAAD,IAAc;AAC1D,YAAMC,MAAM,GAAGD,QAAQ,CAACL,IAAxB;;AACA,UAAIM,MAAM,CAACC,MAAP,IAAiB,SAArB,EAAgC;AAC9BC,QAAAA,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,EAA2CC,KAA3C;AACA1B,QAAAA,SAAS,CAAC,KAAD,CAAT;AACD,OAHD,MAGOA,SAAS,CAAC,IAAD,CAAT;AACR,KAND;AAOD,GAdD;;AAgBA,sBACE;AAAA,2BACE,QAAC,qBAAD;AACE,MAAA,MAAM,EAAEY,MADV;AAEE,MAAA,MAAM,EAAEb,MAFV;AAGE,MAAA,YAAY,EAAEW,YAHhB;AAIE,MAAA,OAAO,EAAE,qBAJX;AAKE,MAAA,WAAW,EAAEf,oBALf;AAME,MAAA,gBAAgB,EAAEmB,SANpB;AAOE,MAAA,QAAQ,EAAEL,QAPZ;AAQE,MAAA,MAAM,EAAE;AARV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GAnDQZ,iB;UACSL,U,EAgBZH,O;;;KAjBGQ,iB;AAqDT,eAAeA,iBAAf","sourcesContent":["import * as yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport RegistrationComponent from \"../../Components/RegistrationComponent\";\r\nimport { AssemblyResultInputs, url } from \"../../Common/Constant\";\r\n\r\nfunction AddAssemblyResult() {\r\n  const history = useHistory();\r\n\r\n  const [failed, setFailed] = useState(null);\r\n\r\n  const schema = yup.object().shape({\r\n    assemblyId: yup.string().required(\"Please Enter Assembly Id\"),\r\n    winningCandidateId: yup\r\n      .string()\r\n      .required(\"Please Enter  Winning Candidate Id\"),\r\n    electionId: yup.string().required(\"Please Enter Election Id\"),\r\n  });\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  const addResult = (formData) => {\r\n    const data = {\r\n      assemblyId: Number.parseInt(formData.assemblyId),\r\n      winningCandidateId: Number.parseInt(formData.winningCandidateId),\r\n      electionId: Number.parseInt(formData.electionId),\r\n    };\r\n\r\n    axios.post(url + \"assemblyResult\", data).then((response) => {\r\n      const result = response.data;\r\n      if (result.status == \"success\") {\r\n        document.getElementById(\"Assembly-Result\").reset();\r\n        setFailed(false);\r\n      } else setFailed(true);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <RegistrationComponent\r\n        errors={errors}\r\n        failed={failed}\r\n        handleSubmit={handleSubmit}\r\n        heading={\"Add Assembly Result\"}\r\n        inputFields={AssemblyResultInputs}\r\n        registerFunction={addResult}\r\n        register={register}\r\n        formId={\"Assembly-Result\"}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddAssemblyResult;\r\n"]},"metadata":{},"sourceType":"module"}